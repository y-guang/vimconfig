# Most part of this is modified form gillescastel

# global setting

## detect context
global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
### for fix the index problem of items and enum
def fix_indent(snip):
    vim.eval('feedkeys("\<c-f>")')
endglobal

# template
snippet template "Basic template" b
% !TEX program = xelatex
\documentclass[UTF8]{article}
\usepackage{ctex}
\usepackage[english]{babel}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{caption}
\usepackage{extarrows}
\usepackage{enumitem}
\usepackage{hyperref}
\usepackage{cleveref}
\usepackage{nameref}
\usepackage{graphicx}

% creat theorem types
\newtheorem{theorem}{Theorem}
\newtheorem{axiom}{Axiom}[section]
\newtheorem{proposition}{Proposition}[section]
\newtheorem{corollary}{Corollary}[section]
\newtheorem{lemma}{Lemma}[section]
\newtheorem{definition}{Definition}[section]
\newtheorem*{remark}{Remark}
\makeatletter
\let\c@proposition\c@axiom
\let\c@corollary\c@axiom
\let\c@lemma\c@axiom
\let\c@definition\c@axiom
\makeatother

% set gap between enumitem, itemize
\setenumerate[1]{itemsep=0pt,partopsep=0pt,parsep=\parskip,topsep=5pt}
\setitemize[1]{itemsep=0pt,partopsep=0pt,parsep=\parskip,topsep=5pt}
\setdescription{itemsep=0pt,partopsep=0pt,parsep=\parskip,topsep=5pt}

\begin{document}
	$0
\end{document}
endsnippet




# Envs
snippet beg "begin{} / end{}" bA
\\begin{$1}$2
	$0
\\end{$1}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0
	\end{tabular}
\end{table}
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet

context "env('align')"
snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet equ "equation" bA
\begin{equation*}
	${1:${VISUAL}}
\end{equation*}
endsnippet

snippet 1. "Enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

context "env('enumerate')"
post_expand "fix_indent(snip)"
snippet - "equals" bA
\item $0
endsnippet

snippet - "Itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

### a better solution https://vi.stackexchange.com/questions/26796/can-this-be-done-with-ultisnips
context "env('itemize')"
post_expand "fix_indent(snip)"
snippet - "new item" bA
\item $0
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet def "definition" b
\begin{definition}[$1]
	$0
\end{definition}
endsnippet





# ref
snippet lab "label" bA
\label{$1}$0
endsnippet

snippet \r "ref" i
\Cref{$1}$0
endsnippet

snippet \rn "ref" i
\Cref{$1} (\nameref{$1})$0
endsnippet

snippet \rc "ref" i
\cref{$1}$0
endsnippet




# comment
context "math()"
snippet tt "text" iA
\text{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mbb "mathbb" iA
\mathbb{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mrm "mathrm" iA
\mathrm{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mbf "mathbf" iA
\mathbf{${1:${VISUAL}}}$0
endsnippet

snippet tbb "text" iA
\textbf{${1:${VISUAL}}}$0
endsnippet

snippet tii "text" iA
\textit{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet =t= "texteq" iA
 \xlongequal{ \text{${1:${VISUAL}}} }$0 
endsnippet




# logic
context "math()"
snippet => "implies" A
\implies
endsnippet

snippet =< "implied by" A
\impliedby
endsnippet

snippet \\impliedby> "implied by" A
\Leftrightarrow
endsnippet

context "math()"
snippet iff "iff" A
\iff
endsnippet

context "math()"
snippet l! "logicNot" Aw
\neg
endsnippet

context "math()"
snippet la "logicAnd" Aw
\land
endsnippet

context "math()"
snippet lv "logicOr" Aw
\vee
endsnippet

context "math()"
snippet o+ "logicPlus" Aw
\oplus
endsnippet

context "math()"
snippet l= "logicEquivalence" Aw
\equiv
endsnippet



# set

context "math()"
snippet EE "geq" A
\exists
endsnippet

context "math()"
snippet AA "forall" A
\forall
endsnippet

snippet !in "not in " A
\not\in
endsnippet

priority 100
context "math()"
snippet inn "in " Ai
\in
endsnippet

context "math()"
snippet cc "subset" Ai
\subset
endsnippet

context "math()"
snippet \subset! "subset" Ai
\subsetneq
endsnippet

context "math()"
snippet \subset= "subset" Ai
\subseteq
endsnippet

priority 10
context "math()"
snippet nn "cap" iA
\cap
endsnippet

context "math()"
snippet uu "cup" iA
\cup
endsnippet

context "math()"
snippet UU "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet NN "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "math()"
snippet OO "emptyset" iA
\varnothing
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to
endsnippet

priority 200
context "math()"
snippet |-> "mapsto" iA
\mapsto
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet oo "circ" iA
\circ
endsnippet



# relationship
context "math()"
snippet != "equals" iA
\neq
endsnippet

priority 100
context "math()"
snippet <= "leq" iA
\le
endsnippet

context "math()"
snippet >= "geq" iA
\ge
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

# counting

context "math()"
snippet cho "choose" iA
{ $1 \choose $2 } $0
endsnippet


# modifier
context "math()"
snippet "hat" "hat" riA
\hat{${1:${VISUAL}}}$0
endsnippet

priority 100
context "math()"
snippet "bar" "bar" riA
\overline{${1:${VISUAL}}}$0
endsnippet

priority 200
context "math()"
snippet "~bar" "bar2" riA
\widetilde{${1:${VISUAL}}}$0
endsnippet




# pairs
context "math()"
snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lrb "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lr< "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet




context "math()"
snippet ... "ldots" iA
\dots
endsnippet




context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet xx "cross" iA
\times
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet




context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet





snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:}
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet int "integral" w
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet



context "math()"
snippet ^^ "to the ... power" iA
^{$1}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet inf "\infty" i
\infty
endsnippet








snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla
endsnippet







priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

snippet ~~ "~" iA
\sim
endsnippet




snippet <| "normal" iA
\triangleleft
endsnippet

snippet |> "normal" iA
\triangleright
endsnippet









context "math()"
snippet '([A-Za-z])(`)' "auto subscript" wr
`!p snip.rv = match.group(1)`^{\prime}
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

